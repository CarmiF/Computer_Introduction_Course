#include <msp430xG46x.h>    

        ORG 1100h
        
id1     DW 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000 
id2     DW 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000
SIZE    DW 8

        RSEG CODE
        
Main    
SUM_ID1         MOV #id1 ,R5 ;Put id1 address in R5  
                MOV SIZE, R6; Store SIZE content in R6. R6 will function as a counter
                CLR R8; Clear R8 to be ready to sum the values of id1
        
LOOP1           MOV @R5+, R7; Forward the address stores in R5 one word. Add R5 current value to R7. 
                ADD R7 , R8; Add the value stored in R7 to R8
                DEC R6 ; Decrease 1 from R6 
                JZ SUM_ID2; If R6==0 go to SUM_ID2 else continue in the current loop
                JMP LOOP1; Go back to loop 1

SUM_ID2         MOV #id2 ,R5 ;Put id2 address in R5  
                MOV SIZE, R6; Store SIZE in R6 to function as a counter
                CLR R9; Clear R8 to be ready to sum the values of id2
        
LOOP2           MOV @R5+, R7; Forward the address stores in R5 one word. Add R5 current value to R7. 
                ADD R7 , R9; Add R7 value to R8
                DEC R6 ; Decrease 1 from R6
                JZ ID1_CHK_E; If R6==0 go to ID1_CHK_E else continue in the current loop
                JMP LOOP2; Go back to loop 1
        
ID1_CHK_E       CLR R4 ; Clear R4
                CLR R6 ; Clear R6
                ADD R8, R6 ; Add 1 to R6, R6 == 1
                AND  #1, R6 ; Check if R6 even
                JZ ID1_EVEN ; If R6 even jump
                JMP ID1_NE_CHK_ID2; Else, check if the sum of id2 even 

ID1_NE_CHK_ID2  CLR R6 ; Clear R6
                ADD R9, R6 ; 
                AND  #1, R6
                JZ ID2_E_ID1_NE 
                


ID1_EVEN        CLR R6 ; Clear R6
                ADD R9, R6 ; 
                AND  #1, R6
                JZ ID1_2_EVEN 
                CLR R4
                ADD R8 , R4
                JMP $
                

ID2_E_ID1_NE    CLR R4
                ADD R9, R4
                JMP $
                
 
ID1_2_EVEN      CMP R9, R8        ; Compare R8 with R9 (R8 - R9)
                JGE  GREATER       ; Jump to GREATER if R8 > R9
                JL  LESS          ; Jump to LESS if R8 < R9
                JMP $
               
        
GREATER         CLR R4
                ADD R9, R4
                JMP $
        
LESS            CLR R4
                ADD R8, R4
                JMP $


 
;-------------------------------------------------------------------------------
        COMMON INTVEC ; Interrupt Vectors
;-------------------------------------------------------------------------------
        ORG RESET_VECTOR ; POR, ext. Reset
        DW Main
        END